<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NOVO POST</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- font-awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body class="bg-gray-900">
  <main class="bg-gray-400 max-w-screen-lg p-8 m-auto space-y-8 ">
    <header class="space-y-4 border">
      <div class="border p-2 flex justify-between items-center">
        <h2 class="text-lg font-semibold">CABEÇALHO</h2>
        <div>
          <button onclick="showFormHeader()" class="border p-4">show</button>
          <button onclick="hiddenFormHeader()" class="border p-4">hidden</button>
        </div>
      </div>
      <script>
        function showFormHeader(){
          const formHeader = document.getElementById('formHeader')
          formHeader.style.height = '100%'
        }
        function hiddenFormHeader(){
          const formHeader = document.getElementById('formHeader')
          formHeader.style.height = '0px'
        }
      </script>

      <section id="formHeader" class="border overflow-hidden h-0">
        <div class="flex flex-col">
          <label for="titleHeader">Titulo:</label>
          <input id="titleHeader" type="text" class="px-4 py-2 border bg-gray-200">
        </div>
  
        <div class="flex flex-col">
          <label for="coverHeader">CAPA:</label>
          <input id="coverHeader" type="text" class="px-4 py-2 border bg-gray-200">
        </div>
  
        <div class="flex flex-col">
          <label for="descriptionHeader">DESCRIÇÃO:</label>
          <textarea name="" id="descriptionHeader" cols="30" rows="5" class="border bg-gray-200 p-4"></textarea>
        </div>
        
        <div class="flex flex-col">
          <label for="authorHeader">AUTOR:</label>
          <select class="border bg-gray-200" id="authorHeader">
            <option selected value="Gabriel Andrade">Gabriel Andrade</option>
          </select>
        </div>
  
        <div class="flex flex-col">
          <label for="categoriesHeader">CATEGORIAS:</label>
          <input id="categoriesHeader" type="text" class="px-4 py-2 border bg-gray-200" placeholder="categoria 1;; categoria 2;; categoria 3">
        </div>
  
        <div class="flex flex-col">
          <label for="">PALAVRAS CHAVE:</label>
          <input id="keywordsHeader" type="text" class="px-4 py-2 border bg-gray-200" placeholder="keyword 1;; keyword 2;; keyword 3">
        </div>
      </section>

      
    </header>
    <hr class="border border-black">

    <section>
      <div class="p-4 flex justify-between border items-center">
        <h2 class="text-lg font-semibold">CONTEUDO</h2>
  
        <div>
          <button onclick="showFormContent()" class="border p-4">show</button>
          <button onclick="hiddenFormContent()" class="border p-4">hidden</button>
        </div>
        <script>
          function showFormContent(){
            const formContent = document.getElementById('formContent')
            formContent.style.height = '100%'
          }
          function hiddenFormContent(){
            const formContent = document.getElementById('formContent')
            formContent.style.height = '0px'
          }
        </script>
      </div>
      <div id="formContent" class="space-y-4 border overflow-hidden">
        <!-- CONTEUDO -->
        <style>
          #contentSection {
              display: flex;
              flex-direction: column;
          }
  
          .itemContent {
              margin-bottom: 10px;
              border: 1px solid #ccc;
              cursor: grab;
          }
  
          .dragging {
              opacity: 0.5;
          }
          </style>
        <section id="contentSection" class="border border-black p-4 duration-300"></section>

      </div>
    </section>
  </main>


  <div class="border px-4 py-2 fixed left-0 top-0 flex flex-col justify-between space-y-2 h-full min-w-96">
    <div class="space-y-4">
      <div>
        <a class="text-blue-700 hover:text-white font-semibold" href="/post/editar">EDITAR POST</a>
        <a class="text-blue-700 hover:text-white font-semibold ml-5" href="/">HOME</a>
      </div>
  
      <!-- CONTROLES -->
      <div class="flex flex-col space-y-2">
        <button onclick="newContent('h2')" class="px-4 py-1 bg-gray-600 text-white font-semibold">h2</button>
        <button onclick="newContent('p')" class="px-4 py-1 bg-gray-600 text-white font-semibold">p</button>
        <button onclick="newContent('img')" class="px-4 py-1 bg-gray-600 text-white font-semibold">img</button>
        <button onclick="newContent('ul')" class="px-4 py-1 bg-gray-600 text-white font-semibold">ul</button>
        <button onclick="newContent('iframe')" class="px-4 py-1 bg-gray-600 text-white font-semibold">iframe</button>
        <button onclick="newContent('blockquote')" class="px-4 py-1 bg-gray-600 text-white font-semibold">blockquote</button>
        <button onclick="newContent('a')" class="px-4 py-1 bg-gray-600 text-white font-semibold">a</button>
      </div>


      
    <div class="border p-2 border-red-500" id="newContent"> </div>

    </div>
    <button onclick="publish()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 w-full">PUBLICAR POST</button>
  </div>
</body>
</html>


<script>
  let contId = 0;
  function normalizeUrl(title) {
  

  // Remover acentos e caracteres especiais
  const normalizedTitle = title
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");

  // Substituir espaços e caracteres especiais por hífens
  const friendlyURL = normalizedTitle
    .replace(/[^\w\s-]/g, "") // Remove caracteres especiais, exceto letras, números, espaços e hífens
    .replace(/\s+/g, "-")     // Substitui espaços por hífens
    .toLowerCase();

  // Retorna a URL em vez de modificar diretamente o objeto
  return friendlyURL;
}
  
  function obterDataAtual() {

    function padZero(numero) {
    return numero < 10 ? `0${numero}` : numero;
}
    const dataAtual = new Date();
    
    // Extrair dia, mês e ano da data
    const dia = padZero(dataAtual.getDate());
    const mes = padZero(dataAtual.getMonth() + 1); // Mês começa do zero, então somamos 1
    const ano = dataAtual.getFullYear();


    
    // Retornar os valores em um objeto
    return `${dia}/${mes}/${ano}`
  }

  function getData(){
    const data = {
      // HEADER
      metadata:{
        url: normalizeUrl(document.getElementById('titleHeader').value),
        title: document.getElementById('titleHeader').value,
        cover: document.getElementById('coverHeader').value,
        description: document.getElementById('descriptionHeader').value,
        author: document.getElementById('authorHeader').value,
        categories: document.getElementById('categoriesHeader').value.split(';;'),
        keywords: document.getElementById('keywordsHeader').value.split(';;'),
        publicationDate: obterDataAtual()
      },
      content:[]
    }

    // CONTENT
    const itemContent = document.querySelectorAll('.itemContent')
    itemContent.forEach((e)=>{
      const typeElement = e.querySelector('h2');
      const contentElement = e.querySelector('textarea');

      const content = {
        type: typeElement.textContent.trim(),
        content: contentElement.value.trim().includes(';;') ? contentElement.value.split(';;') : [contentElement.value]
      };


      data.content.push(content);

    })
    return data
  }

  function newContent(type) {
    contId++;
    const contentSection = document.querySelector('#newContent');
    const newContentDiv = document.createElement('div');

    newContentDiv.id = 'content' + contId;
    newContentDiv.setAttribute('name', type);

    newContentDiv.innerHTML = `
      <div class="itemContent sortable-item" draggable="true" id="content${contId}">
        <div class="flex justify-between pb-2">
          <h2 class="text-lg px-4 py-1 bg-gray-600 text-white font-semibold">${type}</h2>
          <button title="REMOVER" onclick="removeContent('content${contId}')" class="px-4 py-1 bg-red-600 text-white h-10 font-semibold">APAGAR</button>
        </div>
        <textarea name="" id="" cols="30" rows="1" class="border w-full min-h-20 max-h-34 p-4" placeholder="${type == 'h2' ? 'subtitulo...' : type == 'p' ? 'paragrafo' : type == 'img' ? 'link de imagem' : type == 'ul' ? 'item 1;; item 2;; item 3' : type == 'iframe' ? 'link de iframe' : type == 'blockquote' ? 'citação...' : type == 'a' ? 'link;; texto' : 'não identificado!'}"></textarea>
      </div>
    `;
    contentSection.innerHTML = ''
    contentSection.appendChild(newContentDiv);
  }

  function removeContent(id){
    document.querySelector('#'+id).remove()
  }

  async function publish(){
    const data = await getData()
    fetch('/post/new',{
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })
    .then((res)=>{
      console.log(res)
      alert('POST PUBLICADO COM SUCESSO!')
    })
    .catch((err)=>{
      console.log(err)
      alert('ERRO AO PUBLICAR POST!')
    })
  }
  
  let currentButtonType = ''; // Tipo padrão inicial
  function setButtonType(type) {
    currentButtonType = type;
  }


</script>


<script>
  //Drag Drop
  let draggingElement = null;

  document.addEventListener('dragstart', (e) => {
      draggingElement = e.target;
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/html', draggingElement.innerHTML);
      draggingElement.classList.add('dragging');
  });

  document.addEventListener('dragover', (e) => {
      e.preventDefault();
      const afterElement = getDragAfterElement(e.clientY);
      const draggedRect = draggingElement.getBoundingClientRect();

      if (afterElement == null) {
          document.getElementById('contentSection').appendChild(draggingElement);
      } else {
          const afterRect = afterElement.getBoundingClientRect();
          const offset = e.clientY - afterRect.top;
          if (offset > afterRect.height / 2) {
              afterElement.parentNode.insertBefore(draggingElement, afterElement.nextSibling);
          } else {
              afterElement.parentNode.insertBefore(draggingElement, afterElement);
          }
      }
  });

  document.addEventListener('dragend', () => {
      draggingElement.classList.remove('dragging');
      draggingElement = null;
  });

  function getDragAfterElement(y) {
        const draggableElements = [...document.querySelectorAll('.itemContent:not(.dragging)')];
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = Math.abs(y - box.top - box.height / 2);
            if (offset < closest.offset) {
                return { offset, element: child };
            } else {
                return closest;
            }
        }, { offset: Number.POSITIVE_INFINITY }).element;
    }

</script>
